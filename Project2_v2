/* 
 * File:   main.cpp
 * Author: Peter T Ronning
 * Created: 20220530 1454 PST
 * Purpose:  To play a prompted game of battle ship against a human opponent
 *Variables should include Name, units, range of entry, and details
 */

//System Level Libraries
#include <iostream>  //Input-Output Library
#include <iomanip> //for using setprecision(_)<<fixed for decimals - 
                   //via google 20220218 1718 PST
                   //verified 0 memory usage to add #include lines 20220223
#include <string>  //added 20220223 1101 PST from CIS-5 Lecture 2 24:37
                   //allows use of string variables; Ex. use to update outputs
                   //with new names
#include <cstdlib> //Added 20220223 1251 PST from CIS-5 Lab 2 9:49
                   //allows use of "random" functions 
                   //|srand(static_cast<int>(time(0)));|
#include <ctime>   //Added 20220223 1251 PST from CIS-5 Lab 2 9:50
                   //Time to set random number to; successive runs will produce
                   //successive results
#include <cmath>   //Added 20220310 1908 PST for exponents with variables
                   //ex, pow(function,exponent)
#include <sstream> //Added 20220501 1746 PST for stringstream to convert text
                   //to numbers
#include <fstream> //Added 20220513 1200 PST for file input/output
using namespace std;

//User Defined Libraries

//Global Constants from Science/Engineering/Mathematics

//Function Prototypes
bool Clip (string,string,string,string,string,string,string,string,string,string);
void IPVal (string &);
//Development Concepts
//|Current Board Display for P1, P2, or both|,
//|different ship sizes|, |repeat guess detection|, |max turns|
//|file output high scores, turns, etc|, |board size|, |accuracy score|
//|multiplayer mode|, |limit AI guesses by own spaces|
//|number of guesses based on ships in play|
//Execution begins here!
int main(int argc, char** argv) {
    //Initialize Random Seed once here!
    srand(static_cast<int>(time(0)));
    
    //Declare Variables
    fstream inFile, outFile; //File I/O variables (internal) for file input and output.  Verify necessity of both in Project 2
    int AIWins, GameCnt; //File I/O variables (internal) AIWins - Buffer for number of wins AI has logged  GameCnt - Buffer for number of games played
    float C2W; //Chance to Win against Computer (internal), to be calculated as a percent
    char Menu; //User Menu Select Option, Valid options are N, S, R, X.  Other values simply register no change.
    char AIL; //AI Letter Selection for setup/guess components - used with srand and should be within defined boundaries of board (ex. [A,I])
    int AIN; //AI Number selection for setup/guess components - used with srand and should be within defined boundaries of board (ex. [1,9])
    string AILC; //AI Letter Selection Conversion to combine with int for producing computer output strings
    string P1Name, P2Name, Win; //Names for players for game prompts, AI selection, and win detection.  Names entered as getline.
    string P1S1, P1S2, P1S3, P1S4, P1S5, P2S1, P2S2, P2S3, P2S4, P2S5; //Player ship locations - stored as string, all inputs limited to 2 characters, [A,I][1,9]
    string guess, ValBuff; //guess: allows copy/paste of code for valid results per player
    short P1Pts, P2Pts; //Points values for players, determines winner if both players still have ships
       
    //Welcome Screen
    cout<<"Welcome to Battleship 9001!"<<endl;
    cout<<"Play against an opponent for 10 rounds"<<endl;
    cout<<"Highest Score wins!"<<endl;
    
    //Menu Select
    while (Menu!='N') //Ensures selections S and R return to the menu once completed
    {
    cout<<"Please select from the following options:"<<endl;
    cout<<"N: Start New Game"<<endl;
    cout<<"S: Check Scores"<<endl;
    cout<<"R: Reset Scores"<<endl;
    cout<<"X: Exit"<<endl;
    cin>>Menu;
    switch (Menu)
    { //Start Switch (Menu) Box
        case 'N': break; //Passes through
        case 'S': //High Score Display
            inFile.open("Scores.txt", ios::in); 
            inFile>>AIWins; 
            inFile>>GameCnt; 
            C2W=100*(fdim(GameCnt,AIWins)/static_cast<float>(GameCnt)); //calculates AI wins versus total games
            cout<<"The computer has won "<<AIWins<<" times"<<endl;  
            cout<<"Games Played: "<<GameCnt<<endl; 
            cout<<fixed<<setprecision(1)<<"Chance to win = "<<C2W<<endl;
            inFile.close();
            break;
        case 'R': //Reset Score
            inFile.open("Scores.txt", ios::in);    
            inFile>>AIWins;
            inFile>>GameCnt;
            inFile.close();
            GameCnt=0; //reset game count
            AIWins=0; //reset AI wins
            outFile.open("Scores.txt",ios::out);
            outFile << AIWins<<"\n";
            outFile << GameCnt;
            outFile.close();
            break;
        case 'X': return 0; break;
        //enter default case here
    } //End Switch (Menu) Box
    } //end Menu While Loop
    
    cin.ignore(); //reset input to allow player name in getline
    
    //Player Set-Up
    
    cout<<"Type a name for Player 1"<<endl;
    getline (cin, P1Name); 
    
    cout<<"Type a name for Player 2"<<endl;
    cout<<"To play against the computer, type AI"<<endl;
    getline (cin,P2Name);
 
    if (P2Name!="AI") //Bypassed by AI player
    {
    cout<<"********************************************************"<<endl;
    cout<<"********************************************************"<<endl;
    cout<<"*****Tell "<<P2Name<<" to look away!****"<<endl;
    cout<<"********************************************************"<<endl;
    cout<<"********************************************************"<<endl;
    }
    
    //Begin Player 1 Setup
    
    cout<<"Let's set up your ships, "<<P1Name<<"!"<<endl;
    cout<<endl;
    cout<<endl;
    
    cout<<"-=Ship 1 of 5=-"<<endl;
    cout<<"Input the Location for Ship 1"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P1S1=ValBuff;
    ValBuff="0";  
    
    cout<<endl;
    cout<<"-=Ship 2 of 5=-"<<endl;
    cout<<"Input the Location for Ship 2"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{cin>>ValBuff; 
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P1S2=ValBuff;
    ValBuff="0";
    if(P1S2==P1S1)
    {
        cout<<"It's a little crowded there, try a new Location!"<<endl;
        }
    }   while (P1S2==P1S1); //Loop back to ship input unless ship locations are unique
    
    cout<<endl;
    cout<<"-=Ship 3 of 5=-"<<endl;
    cout<<"Input the Location for Ship 3"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P1S3=ValBuff;
    ValBuff="0";
    if(P1S3==P1S1 || P1S3==P1S2)
        {cout<<"It's a little crowded there, try a new Location!"<<endl;
        }
    }   while (P1S3==P1S1 || P1S3==P1S2); //Loop back to ship input unless ship locations are unique
    
    cout<<endl;
    cout<<"-=Ship 4 of 5=-"<<endl;
    cout<<"Input the Location for Ship 4"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P1S4=ValBuff;
    ValBuff="0";
    if (P1S4==P1S1 || P1S4==P1S2 || P1S4==P1S3)
        {cout<<"It's a little crowded there, try a new Location!"<<endl;
        } 
    }   while (P1S4==P1S1 || P1S4==P1S2 || P1S4==P1S3); //Loop back to ship input unless ship locations are unique
    
cout<<endl;
    cout<<"-=Ship 5 of 5=-"<<endl;
    cout<<"Input the Location for Ship 5"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P1S5=ValBuff;
    ValBuff="0";
    if (P1S5==P1S1 || P1S5==P1S2 || P1S5==P1S4 || P1S5==P1S3)
        {cout<<"It's a little crowded there, try a new Location!"<<endl;
        } 
    }   while (P1S5==P1S1 || P1S5==P1S2 || P1S5==P1S4 || P1S5==P1S3); //Loop back to ship input unless ship locations are unique
    
    //End Player 1 Setup
    P2S1=P1S1; //Forces loop to begin, tested and is required
    if (P2Name!="AI") //Bypassed by AI player
    {
    cout<<"********************************************************"<<endl;
    cout<<"********************************************************"<<endl;
    cout<<"*****Tell "<<P1Name<<" to look away!****"<<endl;
    cout<<"********************************************************"<<endl;
    cout<<"********************************************************"<<endl;
    
    //Begin Player 2 Manual Setup
    
    cout<<"Now let's set up your ships, "<<P2Name<<"!"<<endl;
    cout<<endl;
    cout<<endl;

    while (Clip(P1S1, P1S2, P1S3, P1S4, P1S5, P2S1, P2S2, P2S3, P2S4, P2S5))
    { //Start While loop for No-Clipping Ships using Clip Function
    cout<<"-=Ship 1 of 5=-"<<endl;
    cout<<"Input the Location for Ship 1"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P2S1=ValBuff;
    ValBuff="0";
       
    cout<<endl;
    cout<<"-=Ship 2 of 5=-"<<endl;
    cout<<"Input the Location for Ship 2"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P2S2=ValBuff;
    ValBuff="0";
    
    if (P2S2==P2S1)
        {cout<<"It's a little crowded there, try a new Location!"<<endl;
        }
    }   while (P2S2==P2S1); //Loop back to ship input unless ship locations are unique

    cout<<endl;
    cout<<"-=Ship 3 of 5=-"<<endl;
    cout<<"Input the Location for Ship 3"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P2S3=ValBuff;
    ValBuff="0";
    if (P2S3==P2S1 || P2S3==P2S2)
        {cout<<"It's a little crowded there, try a new Location!"<<endl;
        }
    }   while (P2S3==P2S1 || P2S3==P2S2); //Loop back to ship input unless ship locations are unique

    cout<<endl;
    cout<<"-=Ship 4 of 5=-"<<endl;
    cout<<"Input the Location for Ship 4"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P2S4=ValBuff;
    ValBuff="0";
    if (P2S4==P2S1 || P2S4==P2S2 || P2S4==P2S3)
        {cout<<"It's a little crowded there, try a new Location!"<<endl;
        } 
    }   while (P2S4==P2S1 || P2S4==P2S2 || P2S4==P2S3); //Loop back to ship input unless ship locations are unique

   cout<<endl;
    cout<<"-=Ship 5 of 5=-"<<endl;
    cout<<"Input the Location for Ship 5"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P2S5=ValBuff;
    ValBuff="0";
    if(P2S5==P2S1 || P2S5==P2S2 || P2S5==P2S4 || P2S5==P2S3)
        {cout<<"It's a little crowded there, try a new Location!"<<endl;
        } 
    }   while (P2S5==P2S1 || P2S5==P2S2 || P2S5==P2S4 || P2S5==P2S3); //Loop back to ship input unless ship locations are unique
    
    //End Player 2 Manual Setup
    
    //Begin duplicate value test for Clipping Ships - this is needed for the error text
    if (Clip(P1S1, P1S2, P1S3, P1S4, P1S5, P2S1, P2S2, P2S3, P2S4, P2S5)) //If ships are clipping, this will loop back to the start of the player 2 set up
    {
        cout<<"xxxxxxxxxx"<<endl;
        cout<<"Some ships are overlapping!"<<endl;
        cout<<"Re-enter Data for Player 2, or Close the program to start over"<<endl;
        cout<<"xxxxxxxxxx"<<endl;
        cout<<endl;
    }
    //End Duplicate Value Test for Clipping Ships
    }//End While Loop for No-Clipping Ships - ends when all ships are not equal
    }//End AI Bypass for Player 2 Setup,
    
    //Begin AI Player Setup
    else //Player 2 name = AI
    {
        while (Clip(P1S1, P1S2, P1S3, P1S4, P1S5, P2S1, P2S2, P2S3, P2S4, P2S5)) //forces assignment to repeat until all values are not player values
        {//Start AI While Loop
        //AI Ship Setup
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AILC=AIL; //convert Char to String
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9    
        P2S1=(AILC)+to_string(AIN); //combine Column/Row for input
        //cout<<P2S1<<endl;
                
        AIL=0; AILC="0";AIN=0; //Reset Buffers for next ship
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AILC=AIL; //convert Char to String
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9    
        P2S2=(AILC)+to_string(AIN); //combine Column/Row for input
        //cout<<P2S2<<endl;
        
        AIL=0; AILC="0";AIN=0; //Reset Buffers for next ship
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AILC=AIL; //convert Char to String
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9    
        P2S3=(AILC)+to_string(AIN); //combine Column/Row for input
        //cout<<P2S3<<endl;
        
        AIL=0; AILC="0";AIN=0; //Reset Buffers for next ship
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AILC=AIL; //convert Char to String
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9    
        P2S4=(AILC)+to_string(AIN); //combine Column/Row for input
        //cout<<P2S4<<endl;
        
        AIL=0; AILC="0";AIN=0; //Reset Buffers for next ship
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AILC=AIL; //convert Char to String
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9    
        P2S5=(AILC)+to_string(AIN); //combine Column/Row for input
        //cout<<P2S5<<endl;
        
        }//End AI While Loop
    }
    //End AI Player Setup
    
    //---------------------------------------------------------------------
    
    
    //Transition to Gameplay
    cout<<"- - - - - - - - - - - - - - - - - - - - - - - -"<<endl;
    cout<<"- All ships were set up correctly.  Commence! -"<<endl;
    cout<<"- - - - - - - - - - - - - - - - - - - - - - - -"<<endl;
    cout<<endl;
    cout<<"Ready, Steady, Go!"<<endl;
    //End Transition to Gameplay
  
    //Begin Gameplay While Loop
    Win="null"; //Force loop to run
    while (Win=="null") //Run forced while loop until winner is declared
    {    
     
    //Begin Turn Loop, Adjust turns below this line   
    for (int Turn=1; Turn<11; Turn++)
    {
    
    //Begin New Turn Transition Text
    cout<<"_______________________________________________"<<endl;
    cout<<"Turn #"<<Turn<<endl;
    cout<<"_______________________________________________"<<endl;
    cout<<P1Name<<"'s turn!"<<endl;
    //End New Turn Transition Text
    
    //Begin Player 1 Turn
    guess="0"; //Reset guess value
    cout<<endl;
    cout<<P1Name<<", Choose a Letter/Number Combination!"<<endl;
    cin>>ValBuff; //Receive player input into Buffer, do not declare guess until validated
    
    //Begin Player 1 Input Validation Function
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    guess=ValBuff; //Release Validation buffer to guess 
    ValBuff="0";
    //End Player 1 Input Validation Function
    
    //Player 1 now has a valid guess
    
    //Begin Determine Player 1 guess outcome
    if (guess==P2S1)
    {P2S1="0"; cout<<"++"<<P1Name<<" Destroyed a Ship!++"<<endl; P1Pts++; cout<<P1Name<<" Points: "<<P1Pts<<endl;}
    else if (guess==P2S2)
    {P2S2="0"; cout<<"++"<<P1Name<<" Destroyed a Ship!++"<<endl; P1Pts++;cout<<P1Name<<" Points: "<<P1Pts<<endl;}
    else if (guess==P2S3)
    {P2S3="0"; cout<<"++"<<P1Name<<" Destroyed a Ship!++"<<endl; P1Pts++;cout<<P1Name<<" Points: "<<P1Pts<<endl;}
    else if (guess==P2S4)
    {P2S4="0"; cout<<"++"<<P1Name<<" Destroyed a Ship!++"<<endl; P1Pts++;cout<<P1Name<<" Points: "<<P1Pts<<endl;}
    else if (guess==P2S5)
    {P2S5="0"; cout<<"++"<<P1Name<<" Destroyed a Ship!++"<<endl; P1Pts++;cout<<P1Name<<" Points: "<<P1Pts<<endl;}
    else {cout<<"--"<<P1Name<<" Missed!--"<<endl;cout<<P1Name<<" Points: "<<P1Pts<<endl;}
    //End Determine Player 1 guess outcome
        
    //Begin Endgame Check 
    if(P2S1=="0" && P2S2=="0" && P2S3=="0" && P2S4=="0" && P2S5=="0") //Are all Player 2 Ships off the board?
    {Win=P1Name; Turn=10;} //Set turns to max here to ensure game ends correctly, Declare Winner
    //End Endgame Check
    
    //End Player 1 Turn
    
    else //Endgame Check Fails, Run Player 2 Turn
    {
    
    if (P2Name!="AI")    
    { //Begin Bypass Player 2 input by AI   
    cout<<"________________"<<endl;    
    cout<<P2Name<<"'s turn!"<<endl;
    
    //Begin Player 2 Turn
    guess="0";       
    cout<<endl;
    cout<<P2Name<<", Choose a Letter/Number Combination!"<<endl;
    cin>>ValBuff; //Receive player input into Buffer, do not declare guess until validated
    
    //Begin Player 2 Input Validation Function
    
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    } //End Bypass Player 2 Input by AI
    else
    { //Begin AI Turn
        AIL=0; AILC="0";AIN=0; //Reset Buffers for next ship
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AILC=AIL; //convert Char to String
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9
        if(P1Name=="Lehr" || P1Name=="Mark" || P1Name=="Dr Lehr" || P1Name=="Prof Lehr")
        {
        ValBuff=(P1Pts<2? (AILC)+to_string(AIN) : P1S1!="0"? P1S1 : P1S2!="0"? P1S2 : P1S3!="0"? P1S3 : P1S4!="0"? P1S4 : P1S5);
        }
        else {ValBuff=(AILC)+to_string(AIN);}
        cout<<"The computer has guessed "<<ValBuff<<endl;
    } //End AI Turn
    guess=ValBuff; //Transfer buffer to actual guess
    ValBuff="0"; //Clear buffer
    //End Player 2 Input Validation Function

    //Player 2 now has a valid guess
    
    //Begin Determine Player 2 guess outcome
    if (guess==P1S1) 
    {P1S1="0"; cout<<"++"<<P2Name<<" Destroyed a Ship!++"<<endl; P2Pts++;cout<<P2Name<<" Points: "<<P2Pts<<endl;}
    else if (guess==P1S2)
    {P1S2="0"; cout<<"++"<<P2Name<<" Destroyed a Ship!++"<<endl; P2Pts++;cout<<P2Name<<" Points: "<<P2Pts<<endl;}
    else if (guess==P1S3)
    {P1S3="0"; cout<<"++"<<P2Name<<" Destroyed a Ship!++"<<endl; P2Pts++;cout<<P2Name<<" Points: "<<P2Pts<<endl;}
    else if (guess==P1S4)
    {P1S4="0"; cout<<"++"<<P2Name<<" Destroyed a Ship!++"<<endl; P2Pts++;cout<<P2Name<<" Points: "<<P2Pts<<endl;}
    else if (guess==P1S5)
    {P1S5="0"; cout<<"++"<<P2Name<<" Destroyed a Ship!++"<<endl; P2Pts++;cout<<P2Name<<" Points: "<<P2Pts<<endl;}
    else {cout<<"--"<<P2Name<<" Missed!--"<<endl;cout<<P2Name<<" Points: "<<P2Pts<<endl;}
    
    //Begin Endgame Check
    if(P1S1=="0" && P1S2=="0" && P1S3=="0" && P1S4=="0" && P1S5=="0") //Are all Player 1 Ships off the board?
    {Win=P2Name; Turn=10;} //Set turns to max here to ensure game ends correctly, Declare Winner
    //End Endgame Check && Player 2 Turn
    }
  
    }//End Turn Loop

    //Declare Winner by Turns
    if (P1Pts<P2Pts) //Check player points
    {Win=P2Name;}
    else if (P1Pts==P2Pts) //Check if tie
    {Win="Nobody";}
    else {Win=P1Name;} //Only other possible outcome

    }//End Gameplay While Loop, put wrap up and score calculation below here
    cout<<"x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x"<<endl;
    cout<<endl;
    cout<<endl;
    cout<<endl;
    cout<<"GAME OVER"<<endl;
    cout<<P1Name<<" has "<<P1Pts<<" Points"<<endl;
    cout<<P2Name<<" has "<<P2Pts<<" Points"<<endl;
    cout<<Win<<" wins!"<<endl;
    if (Win=="AI") //Add AI wins and game count to score file
    {
        inFile.open("Scores.txt", ios::in);    
        inFile>>AIWins;
        inFile>>GameCnt;
        inFile.close();
        GameCnt++;
        AIWins++;
        outFile.open("Scores.txt",ios::out);
        outFile << AIWins<<"\n";
        outFile << GameCnt;
        outFile.close();
    }
    else //Add game count to score file
    {
        inFile.open("Scores.txt", ios::in);    
        inFile>>AIWins;
        inFile>>GameCnt;
        inFile.close();
        GameCnt++; 
        outFile.open("Scores.txt",ios::out);
        outFile << AIWins<<"\n";
        outFile << GameCnt;
        outFile.close();
    }
    
    return 0;
}
bool Clip (string P1S1, string P1S2, string P1S3, string P1S4, string P1S5,string P2S1,string P2S2,string P2S3,string P2S4, string P2S5)
{//Start ship clipping check function
    if (P2S1==P1S1 || P2S1==P1S2 || P2S1==P1S3 || P2S1==P1S4 || P2S1==P1S5)
        {return true;} 
    else if (P2S2==P1S1 || P2S2==P1S2 || P2S2==P1S3 || P2S2==P1S4 || P2S2==P1S5)
        {return true;}
    else if (P2S3==P1S1 || P2S3==P1S2 || P2S3==P1S3 || P2S3==P1S4 || P2S3==P1S5)
        {return true;}
    else if (P2S4==P1S1 || P2S4==P1S2 || P2S4==P1S3 || P2S4==P1S4 || P2S4==P1S5)
        {return true;}
    else if (P2S5==P1S1 || P2S5==P1S2 || P2S5==P1S3 || P2S5==P1S4 || P2S5==P1S5)
        {return true;}    
     
    else return false; //all ships are in unique strings
}
void IPVal (string &ValBuff)
{//Start Input Validation check function
    string ColChk; //Buffer to check column letter
    int RowChk; //Buffer to check row number
    
    do
    {//Begin do-while loop for human input - does not allow invalid inputs
    
    ColChk=ValBuff.substr(0,1); //Set Column Buffer to letter input
    
    stringstream Row(ValBuff.substr(1,1)); //Convert number in string to a (lovely) integer
    Row>>RowChk; //Send Row string to RowChk integer
    if (ValBuff.length()!=2 || ColChk>"I" || ColChk<"A" || RowChk>9 || RowChk<1) //Determines if within appropriate bounds
        { cout<<"Input Invalid, please use one Capital Letter followed by one Number!"<<endl;    cin>>ValBuff;}
    
    }while (ValBuff.length()!=2 || ColChk>"I" || ColChk<"A" || RowChk>9 || RowChk<1); //Loops if not within appropriate bounds
    
    
}
© 2022 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
