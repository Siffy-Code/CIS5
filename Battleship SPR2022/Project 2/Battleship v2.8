/* 
 * File:   main.cpp
 * Author: Peter T Ronning
 * Created: 20220530 1454 PST
 * Last Modified: 20220604
 * Purpose:  To play a prompted game of battle ship against a human opponent
 *Variables should include Name, units, range of entry, and details
 */

//System Level Libraries
#include <iostream>  //Input-Output Library
#include <iomanip> //for using setprecision(_)<<fixed for decimals - 
                   //via google 20220218 1718 PST
                   //verified 0 memory usage to add #include lines 20220223
#include <string>  //added 20220223 1101 PST from CIS-5 Lecture 2 24:37
                   //allows use of string variables; Ex. use to update outputs
                   //with new names
#include <cstdlib> //Added 20220223 1251 PST from CIS-5 Lab 2 9:49
                   //allows use of "random" functions 
                   //|srand(static_cast<int>(time(0)));|
#include <ctime>   //Added 20220223 1251 PST from CIS-5 Lab 2 9:50
                   //Time to set random number to; successive runs will produce
                   //successive results
#include <cmath>   //Added 20220310 1908 PST for exponents with variables
                   //ex, pow(function,exponent)
#include <sstream> //Added 20220501 1746 PST for stringstream to convert text
                   //to numbers
#include <fstream> //Added 20220513 1200 PST for file input/output
#include <vector>  //Added 20220604 for Scores
using namespace std;

//User Defined Libraries
struct record
            {
                string Name; //player name
                char Vs; //W or L for winner/loser
                int Ps=0; //points accumulated
                int Ts; //turns
                
            };
//Global Constants from Science/Engineering/Mathematics

//Function Prototypes
void IPVal (string &); //Verifies input to be within board range
void IPVal (short &); //Verifies input to be within board range (for grading purposes)
void FillShp (string [],int,string); //fills ships with nested data validation to ensure no ships go off the board
bool Clip2 (string [],int,string[],int,string &); //array comparison tool
void ICoord (string [],int); //outputs individual ship coordinates
void UpdSBrd (string [],int,string [][9],int,string [][9]); //updates ship boards
void UpdGBrd (string,string[][9],int,string [][9],bool); //updates guess boards
void MBdFill (string [][9],int); //fills master board
void DisBrd (string [][9],int); //displays a board
void BBdFill (string [][9],int); //fills boards initially with tildes (waves!)
void Shoot (string ,string [][9],int ,string [][9],string [][9],short &); //Allows player to make a gridsquare guess 
void DisScre(vector<record> &); //Displays Scores
string Cnvt (char); //Converts a char to a string (for grading purposes)
//Development Concepts
//|Current Board Display for P1, P2, or both|,
//|different ship sizes|, |repeat guess detection|, |max turns|
//|file output high scores, turns, etc|, |board size|, |accuracy score|
//|multiplayer mode|, |limit AI guesses by own spaces|
//|number of guesses based on ships in play|
//Execution begins here!
int main(int argc, char** argv) {
    //Initialize Random Seed once here!
    srand(static_cast<int>(time(0)));
    
    //Declare Variables
    
        //Score Variables
            fstream inFile, 
                    outFile; //File I/O variables (internal) for file input and output.  Verify necessity of both in Project 2
            vector<record> Scrs; //final scorecard version
        //Core Variables
            char    Menu; //User Menu Select Option, Valid options are N, S, R, X.  Other values simply register no change.
            string  P1Name, 
                    P2Name, 
                    Win; //Names for players for game prompts, AI selection, and win detection.  Names entered as getline.
            string  guess, 
                    ValBuff; //guess: allows copy/paste of code for valid results per player
            short   Len,    //game length variable, size irrelevant game will end if all points earned
                    WinPts,
                    LosePts,
                    P1Pts, 
                    P2Pts; //Points values for players, determines winner if both players still have ships
        //AI Variables
            char    AIL; //AI Letter Selection for setup/guess components - used with srand and should be within defined boundaries of board (ex. [A,I])
            int     AIN; //AI Number selection for setup/guess components - used with srand and should be within defined boundaries of board (ex. [1,9])
        //Ship Arrays
            const static int    SIZE2=2, 
                                SIZE3=3, 
                                SIZE4=4, 
                                SIZE5=5, 
                                SIZE9=9; //sizes for arrays
            string  P1S1a[SIZE2], 
                    P1S2a[SIZE3], 
                    P1S3a[SIZE3], 
                    P1S4a[SIZE4], 
                    P1S5a[SIZE5], 
                    P2S1a[SIZE2], 
                    P2S2a[SIZE3], 
                    P2S3a[SIZE3], 
                    P2S4a[SIZE4], 
                    P2S5a[SIZE5]; //arrays for each ship location assignments
            string  Brd1S[SIZE9][SIZE9],
                    Brd1G[SIZE9][SIZE9],
                    Brd2S[SIZE9][SIZE9],
                    Brd2G[SIZE9][SIZE9], 
                    BrdMst[SIZE9][SIZE9]; //board arrays for output display of guesses and ship locations - ship arrays and guesses update these when updated
    
    //Initialize Boards
    MBdFill(BrdMst,SIZE9);
    BBdFill(Brd1S,SIZE9);
    BBdFill(Brd2S,SIZE9);
    BBdFill(Brd1G,SIZE9);
    BBdFill(Brd2G,SIZE9);
    //Welcome Screen
    cout<<"Welcome to Battleship 9001!"<<endl;
    cout<<"Play against an opponent for 10 rounds"<<endl;
    cout<<"Highest Score wins!"<<endl;
    //Menu Select
    while (Menu!='N') //Ensures selections S and R return to the menu once completed
    {
    cout<<"Please select from the following options:"<<endl;
    cout<<"N: Start New Game"<<endl;
    cout<<"S: Check Scores"<<endl;
    cout<<"R: Reset Scores"<<endl;
    cout<<"A: Sort Scores Alphabetically"<<endl;
    cout<<"H: Sort Scores by High Score"<<endl;
    cout<<"F: Search Scores by Name"<<endl;
    cout<<"X: Exit"<<endl;
    cin>>Menu;
    cout<<endl;
    cout<<endl;
    switch (Menu)
    { //Start Switch (Menu) Box
        case 'N': cout<<endl;
                  cout<<endl;break; //Passes through
        case 'S': //High Score Display
                inFile.open("Test1.txt", ios::in);  //reads a txt to a vector
                while(!inFile.eof())
                {
                    record Plyr;
                    if(inFile >> Plyr.Name >> Plyr.Vs >> Plyr.Ps >> Plyr.Ts)
                    {Scrs.push_back(Plyr);}
                    else{
                        inFile.clear();
                        inFile.ignore(100,'\n');
                    }
                }
                inFile.close();
                DisScre(Scrs);
                cout<<endl;
                cout<<endl;
                break;
        case 'R': //Reset Score
                Scrs={};
                outFile.open("Test1.txt",ios::out);  //puts a vector in a txt
                for(int k=0;k<Scrs.size();k++)
                {
               outFile << Scrs[k].Name<<"\t"<<Scrs[k].Vs<<"\t"<<Scrs[k].Ps<<"\t"<<Scrs[k].Ts<<"\n";
                }
                outFile.close();
                inFile.open("Test1.txt", ios::in);  //reads a txt to a vector
                while(!inFile.eof())
                {
                    record Plyr;
                    if(inFile >> Plyr.Name >> Plyr.Vs >> Plyr.Ps >> Plyr.Ts)
                    {Scrs.push_back(Plyr);}
                    else{
                        inFile.clear();
                        inFile.ignore(100,'\n');
                    }
                }
                inFile.close();
                cout<<endl;
                cout<<endl;
                break;
        case 'X': exit(0); break;
        case 'A':{ //Sort Scores Alphabetically (Selection Sort)
                    Scrs={};
                    inFile.open("Test1.txt", ios::in);  //reads a txt to a vector
                        while(!inFile.eof())
                        {
                            record Plyr;
                            if(inFile >> Plyr.Name >> Plyr.Vs >> Plyr.Ps >> Plyr.Ts)
                            {Scrs.push_back(Plyr);}
                            else{
                                inFile.clear();
                                inFile.ignore(100,'\n');
                                }
                        }
                    inFile.close();
                    record BF;
             
                    for(int i=0 ; i<Scrs.size() ; i++)
                    {
                        for(int n=i+1 ; n<Scrs.size() ; n++)
                        {
                            if(Scrs[i].Name>Scrs[n].Name)
                            {
                                BF=Scrs[i];
                                Scrs[i]=Scrs[n];
                                Scrs[n]=BF;
                                BF={};
                            }
                        }
                    }
                    cout<<endl;
                    cout<<endl;
                    outFile.open("Test1.txt",ios::out);  //puts a vector in a txt
                    for(int k=0;k<Scrs.size();k++)
                        {
                        outFile << Scrs[k].Name<<"\t"<<Scrs[k].Vs<<"\t"<<Scrs[k].Ps<<"\t"<<Scrs[k].Ts<<"\n";
                        }
                    outFile.close();
                    Scrs={};       
                    break;
                    }
            case 'H': {//Sort Scores by High Score (Bubble Sort)
                    Scrs={};
                    inFile.open("Test1.txt", ios::in);  //reads a txt to a vector
                        while(!inFile.eof())
                        {
                            record Plyr;
                            if(inFile >> Plyr.Name >> Plyr.Vs >> Plyr.Ps >> Plyr.Ts)
                            {Scrs.push_back(Plyr);}
                            else{
                                inFile.clear();
                                inFile.ignore(100,'\n');
                                }
                        }
                        inFile.close();
                    record BBF;
                    for(int i=0 ; i<Scrs.size()-1 ; i++)
                    {
                        for(int n=0 ; n<Scrs.size()-i-1 ; n++)
                        {
                            if(Scrs[n].Ps<Scrs[n+1].Ps)
                            {
                                BBF=Scrs[n];
                                Scrs[n]=Scrs[n+1];
                                Scrs[n+1]=BBF;
                                BBF={};
                            }
                        }
                    }
                    cout<<endl;
                    cout<<endl;
                    outFile.open("Test1.txt",ios::out);  //puts a vector in a txt
                    for(int k=0;k<Scrs.size();k++)
                        {
                        outFile << Scrs[k].Name<<"\t"<<Scrs[k].Vs<<"\t"<<Scrs[k].Ps<<"\t"<<Scrs[k].Ts<<"\n";
                        }
                    outFile.close();
                    Scrs={};       
                    break;
                    }       
            case 'F': {//Search Scores using Linear Search
                string Srch;
                cout<<"Please type the desired name"<<endl;
                cin>>Srch;
                Scrs={};
                inFile.open("Test1.txt", ios::in);  //reads a txt to a vector
                        while(!inFile.eof())
                        {
                            record Plyr;
                            if(inFile >> Plyr.Name >> Plyr.Vs >> Plyr.Ps >> Plyr.Ts)
                            {Scrs.push_back(Plyr);}
                            else{
                                inFile.clear();
                                inFile.ignore(100,'\n');
                                }
                        }
                    inFile.close();
                           
                    
                    for(int h=0;h<Scrs.size();h++)
                    {
                        if (Scrs[h].Name==Srch)
                        {
                        cout<<"Name"<<"\t"<<"W/L"<<"\t"<<"Pts"<<"\t"<<"Turns"<<endl;
                        cout<<Scrs[h].Name<<"\t"<<Scrs[h].Vs<<"\t"<<Scrs[h].Ps<<"\t"<<Scrs[h].Ts<<endl;
                        }
                    }
                    cout<<endl;
                    cout<<endl;
                    outFile.open("Test1.txt",ios::out);  //puts a vector in a txt
                    for(int k=0;k<Scrs.size();k++)
                        {
                        outFile << Scrs[k].Name<<"\t"<<Scrs[k].Vs<<"\t"<<Scrs[k].Ps<<"\t"<<Scrs[k].Ts<<"\n";
                        }
                    outFile.close();
                    Scrs={};       
                    break;
                    }
    } //End Switch (Menu) Box
    } //end Menu While Loop
    
    cin.ignore(); //reset input to allow player name in getline
    
    //Player Set-Up
    
    cout<<"Type a name for Player 1"<<endl;
    cout<<"Use the name 'Skip' to enter debug mode"<<endl;
    getline (cin, P1Name); 
    
    cout<<"Type a name for Player 2"<<endl;
    cout<<"To play against the computer, type AI"<<endl;
    getline (cin,P2Name);
 
    cout<<endl;
            
    if (P2Name!="AI") //Bypassed by AI player
    {
    cout<<"********************************************************"<<endl;
    cout<<"********************************************************"<<endl;
    cout<<"*****Tell "<<P2Name<<" to look away!****"<<endl;
    cout<<"********************************************************"<<endl;
    cout<<"********************************************************"<<endl;
    }
    if (P1Name!="Skip")
    {
    cout<<"Let's set up your ships, "<<P1Name<<"!"<<endl;
    cout<<endl;
    cout<<endl;
    DisBrd(Brd1S,SIZE9);  
    cout<<"-=Ship 1 of 5=-"<<endl;
    cout<<"Input a Grid Square to initialize Ship 1 Placement"<<endl;
    cout<<"-=DESTROYER - TWO SPACES=-"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P1S1a[0]=ValBuff; //Set initial value of Array to Player Input
    ValBuff="0";
    cout<<"Set up direction for Destroyer (2 Spaces)"<<endl;
    cout<<"Type |L| for Left, |R| for Right, |U| for Up, and |D| for down"<<endl;
    cin>>ValBuff;
    FillShp(P1S1a,SIZE2,ValBuff); //Sends player to Fill Ship function, data validation nested
    cout<<"Your Ship's Coordinates Are:"<<endl;
    ICoord(P1S1a,SIZE2); //Outputs individual ship coordinates
    UpdSBrd(P1S1a,SIZE2,Brd1S,SIZE9,BrdMst);
    DisBrd(Brd1S,SIZE9);    
    
    cout<<endl;
    cout<<"-=Ship 2 of 5=-"<<endl;
    cout<<"Input a Grid Square to initialize Ship 2 Placement"<<endl;
    cout<<"-=CRUISER - THREE SPACES=-"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{        
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P1S2a[0]=ValBuff;
    ValBuff="0";    
    cout<<"Set up direction for Cruiser (3 Spaces)"<<endl;
    cout<<"Type |L| for Left, |R| for Right, |U| for Up, and |D| for down"<<endl;
    cin>>ValBuff;    
    FillShp(P1S2a,SIZE3,ValBuff);
    ValBuff="0";
    if (Clip2(P1S1a,SIZE2,P1S2a,SIZE3,ValBuff)) //Display Error Text & Clear Buffer if invalid
        {
        cout<<"Invalid Selection - Ships Cannot Overlap"<<endl;
        cout<<"Overlapping Ship Coordinates"<<endl;
        cout<<ValBuff<<endl;
        cout<<"Please Re-Initialize Ship"<<endl;
        cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
        ValBuff="0";
        }
    }   while (Clip2(P1S1a,SIZE2,P1S2a,SIZE3,ValBuff)); //Loop back to ship input unless ship locations are unique
    cout<<endl;
    cout<<"Your Ship's Coordinates Are:"<<endl;
    ICoord(P1S2a,SIZE3);
    UpdSBrd(P1S2a,SIZE3,Brd1S,SIZE9,BrdMst);
    DisBrd(Brd1S,SIZE9); 
    
    cout<<endl;
    cout<<"-=Ship 3 of 5=-"<<endl;
     cout<<"Input a Grid Square to initialize Ship 3 Placement"<<endl;
    cout<<"-=SUBMARINE - THREE SPACES=-"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{        
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P1S3a[0]=ValBuff;
    ValBuff="0";    
    cout<<"Set up direction for Submarine (3 Spaces)"<<endl;
    cout<<"Type |L| for Left, |R| for Right, |U| for Up, and |D| for down"<<endl;
    cin>>ValBuff;    
    FillShp(P1S3a,SIZE3,ValBuff);
    ValBuff="0";
    if (Clip2(P1S3a,SIZE3,P1S2a,SIZE3,ValBuff)||Clip2(P1S3a,SIZE3,P1S1a,SIZE2,ValBuff))
        {
        cout<<"Invalid Selection - Ships Cannot Overlap"<<endl;
        cout<<"Overlapping Ship Coordinates"<<endl;
        cout<<ValBuff<<endl;
        cout<<"Please Re-Initialize Ship"<<endl;
        cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
        ValBuff="0";
        }
    }   while (Clip2(P1S3a,SIZE3,P1S2a,SIZE3,ValBuff)||Clip2(P1S3a,SIZE3,P1S1a,SIZE2,ValBuff)); //Loop back to ship input unless ship locations are unique
    cout<<endl;
    cout<<"Your Ship's Coordinates Are:"<<endl;
    ICoord(P1S3a,SIZE3);
    UpdSBrd(P1S3a,SIZE3,Brd1S,SIZE9,BrdMst);
    DisBrd(Brd1S,SIZE9); 
    
    cout<<endl;
    cout<<"-=Ship 4 of 5=-"<<endl;
     cout<<"Input a Grid Square to initialize Ship 4 Placement"<<endl;
    cout<<"-=BATTLECRUISER - FOUR SPACES=-"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{        
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P1S4a[0]=ValBuff;
    ValBuff="0";    
    cout<<"Set up direction for Battlecruiser (4 Spaces)"<<endl;
    cout<<"Type |L| for Left, |R| for Right, |U| for Up, and |D| for down"<<endl;
    cin>>ValBuff;    
    FillShp(P1S4a,SIZE4,ValBuff);
    ValBuff="0";
    if (Clip2(P1S4a,SIZE4,P1S2a,SIZE3,ValBuff)||Clip2(P1S4a,SIZE4,P1S1a,SIZE2,ValBuff)||Clip2(P1S4a,SIZE4,P1S3a,SIZE3,ValBuff))
        {
        cout<<"Invalid Selection - Ships Cannot Overlap"<<endl;
        cout<<"Overlapping Ship Coordinates"<<endl;
        cout<<ValBuff<<endl;
        cout<<"Please Re-Initialize Ship"<<endl;
        cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
        ValBuff="0";
        }
    }   while (Clip2(P1S4a,SIZE4,P1S2a,SIZE3,ValBuff)||Clip2(P1S4a,SIZE4,P1S1a,SIZE2,ValBuff)||Clip2(P1S4a,SIZE4,P1S3a,SIZE3,ValBuff));
    cout<<endl;
    cout<<"Your Ship's Coordinates Are:"<<endl;
    ICoord(P1S4a,SIZE4);
    UpdSBrd(P1S4a,SIZE4,Brd1S,SIZE9,BrdMst);
    DisBrd(Brd1S,SIZE9); 
    
cout<<endl;
    cout<<"-=Ship 5 of 5=-"<<endl;
    cout<<"Input a Grid Square to initialize Ship 5 Placement"<<endl;
    cout<<"-=CARRIER - FIVE SPACES=-"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{        
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P1S5a[0]=ValBuff;
    ValBuff="0";    
    cout<<"Set up direction for Carrier (5 Spaces)"<<endl;
    cout<<"Type |L| for Left, |R| for Right, |U| for Up, and |D| for down"<<endl;
    cin>>ValBuff;    
    FillShp(P1S5a,SIZE5,ValBuff);
    ValBuff="0";
    if (Clip2(P1S5a,SIZE5,P1S2a,SIZE3,ValBuff)||Clip2(P1S5a,SIZE5,P1S1a,SIZE2,ValBuff)||Clip2(P1S5a,SIZE5,P1S3a,SIZE3,ValBuff)||Clip2(P1S5a,SIZE5,P1S4a,SIZE4,ValBuff))
        {
        cout<<"Invalid Selection - Ships Cannot Overlap"<<endl;
        cout<<"Overlapping Ship Coordinates"<<endl;
        cout<<ValBuff<<endl;
        cout<<"Please Re-Initialize Ship"<<endl;
        cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
        ValBuff="0";
        }
    }   while (Clip2(P1S5a,SIZE5,P1S2a,SIZE3,ValBuff)||Clip2(P1S5a,SIZE5,P1S1a,SIZE2,ValBuff)||Clip2(P1S5a,SIZE5,P1S3a,SIZE3,ValBuff)||Clip2(P1S5a,SIZE5,P1S4a,SIZE4,ValBuff));
    cout<<endl;
    cout<<"Your Ship's Coordinates Are:"<<endl;
    ICoord(P1S5a,SIZE5);
    UpdSBrd(P1S5a,SIZE5,Brd1S,SIZE9,BrdMst);
    //End Player 1 Setup
    DisBrd(Brd1S,SIZE9); 
    }

    if (P2Name!="AI") //Bypassed by AI player
    {
    cout<<"********************************************************"<<endl;
    cout<<"********************************************************"<<endl;
    cout<<"*****Tell "<<P1Name<<" to look away!****"<<endl;
    cout<<"********************************************************"<<endl;
    cout<<"********************************************************"<<endl;    
        
    cout<<"Let's set up your ships, "<<P2Name<<"!"<<endl;
    cout<<endl;
    cout<<endl;
    DisBrd(Brd1S,SIZE9);  
    cout<<"-=Ship 1 of 5=-"<<endl;
    cout<<"Input a Grid Square to initialize Ship 1 Placement"<<endl;
    cout<<"-=DESTROYER - TWO SPACES=-"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P2S1a[0]=ValBuff; //Set initial value of Array to Player Input
    ValBuff="0";
    cout<<"Set up direction for Destroyer (2 Spaces)"<<endl;
    cout<<"Type |L| for Left, |R| for Right, |U| for Up, and |D| for down"<<endl;
    cin>>ValBuff;
    FillShp(P2S1a,SIZE2,ValBuff); //Sends player to Fill Ship function, data validation nested
    cout<<"Your Ship's Coordinates Are:"<<endl;
    ICoord(P2S1a,SIZE2); //Outputs individual ship coordinates
    UpdSBrd(P2S1a,SIZE2,Brd2S,SIZE9,BrdMst);
    DisBrd(Brd2S,SIZE9);    
    
    cout<<endl;
    cout<<"-=Ship 2 of 5=-"<<endl;
    cout<<"Input a Grid Square to initialize Ship 2 Placement"<<endl;
    cout<<"-=CRUISER - THREE SPACES=-"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{        
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P2S2a[0]=ValBuff;
    ValBuff="0";    
    cout<<"Set up direction for Cruiser (3 Spaces)"<<endl;
    cout<<"Type |L| for Left, |R| for Right, |U| for Up, and |D| for down"<<endl;
    cin>>ValBuff;    
    FillShp(P2S2a,SIZE3,ValBuff);
    ValBuff="0";
    if (Clip2(P2S1a,SIZE2,P2S2a,SIZE3,ValBuff)) //Display Error Text & Clear Buffer if invalid
        {
        cout<<"Invalid Selection - Ships Cannot Overlap"<<endl;
        cout<<"Overlapping Ship Coordinates"<<endl;
        cout<<ValBuff<<endl;
        cout<<"Please Re-Initialize Ship"<<endl;
        cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
        ValBuff="0";
        }
    }   while (Clip2(P2S1a,SIZE2,P2S2a,SIZE3,ValBuff)); //Loop back to ship input unless ship locations are unique
    cout<<endl;
    cout<<"Your Ship's Coordinates Are:"<<endl;
    ICoord(P2S2a,SIZE3);
    UpdSBrd(P2S2a,SIZE3,Brd2S,SIZE9,BrdMst);
    DisBrd(Brd2S,SIZE9); 
    
    cout<<endl;
    cout<<"-=Ship 3 of 5=-"<<endl;
     cout<<"Input a Grid Square to initialize Ship 3 Placement"<<endl;
    cout<<"-=SUBMARINE - THREE SPACES=-"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{        
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P2S3a[0]=ValBuff;
    ValBuff="0";    
    cout<<"Set up direction for Submarine (3 Spaces)"<<endl;
    cout<<"Type |L| for Left, |R| for Right, |U| for Up, and |D| for down"<<endl;
    cin>>ValBuff;    
    FillShp(P2S3a,SIZE3,ValBuff);
    ValBuff="0";
    if (Clip2(P2S3a,SIZE3,P2S2a,SIZE3,ValBuff)||Clip2(P2S3a,SIZE3,P2S1a,SIZE2,ValBuff))
        {
        cout<<"Invalid Selection - Ships Cannot Overlap"<<endl;
        cout<<"Overlapping Ship Coordinates"<<endl;
        cout<<ValBuff<<endl;
        cout<<"Please Re-Initialize Ship"<<endl;
        cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
        ValBuff="0";
        }
    }   while (Clip2(P2S3a,SIZE3,P2S2a,SIZE3,ValBuff)||Clip2(P2S3a,SIZE3,P2S1a,SIZE2,ValBuff)); //Loop back to ship input unless ship locations are unique
    cout<<endl;
    cout<<"Your Ship's Coordinates Are:"<<endl;
    ICoord(P2S3a,SIZE3);
    UpdSBrd(P2S3a,SIZE3,Brd2S,SIZE9,BrdMst);
    DisBrd(Brd2S,SIZE9); 
    
    cout<<endl;
    cout<<"-=Ship 4 of 5=-"<<endl;
     cout<<"Input a Grid Square to initialize Ship 4 Placement"<<endl;
    cout<<"-=BATTLECRUISER - FOUR SPACES=-"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{        
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P2S4a[0]=ValBuff;
    ValBuff="0";    
    cout<<"Set up direction for Battlecruiser (4 Spaces)"<<endl;
    cout<<"Type |L| for Left, |R| for Right, |U| for Up, and |D| for down"<<endl;
    cin>>ValBuff;    
    FillShp(P2S4a,SIZE4,ValBuff);
    ValBuff="0";
    if (Clip2(P2S4a,SIZE4,P2S2a,SIZE3,ValBuff)||Clip2(P2S4a,SIZE4,P2S1a,SIZE2,ValBuff)||Clip2(P2S4a,SIZE4,P2S3a,SIZE3,ValBuff))
        {
        cout<<"Invalid Selection - Ships Cannot Overlap"<<endl;
        cout<<"Overlapping Ship Coordinates"<<endl;
        cout<<ValBuff<<endl;
        cout<<"Please Re-Initialize Ship"<<endl;
        cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
        ValBuff="0";
        }
    }   while (Clip2(P2S4a,SIZE4,P2S2a,SIZE3,ValBuff)||Clip2(P2S4a,SIZE4,P2S1a,SIZE2,ValBuff)||Clip2(P2S4a,SIZE4,P2S3a,SIZE3,ValBuff));
    cout<<endl;
    cout<<"Your Ship's Coordinates Are:"<<endl;
    ICoord(P2S4a,SIZE4);
    UpdSBrd(P2S4a,SIZE4,Brd2S,SIZE9,BrdMst);
    DisBrd(Brd2S,SIZE9); 
    
cout<<endl;
    cout<<"-=Ship 5 of 5=-"<<endl;
     cout<<"Input a Grid Square to initialize Ship 5 Placement"<<endl;
    cout<<"-=CARRIER - FIVE SPACES=-"<<endl;
    cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
    cout<<"(Examples: A1, B6, I8, G9)"<<endl;
    do{        
    cin>>ValBuff;
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    P2S5a[0]=ValBuff;
    ValBuff="0";    
    cout<<"Set up direction for Carrier (5 Spaces)"<<endl;
    cout<<"Type |L| for Left, |R| for Right, |U| for Up, and |D| for down"<<endl;
    cin>>ValBuff;    
    FillShp(P2S5a,SIZE5,ValBuff);
    ValBuff="0";
    if (Clip2(P2S5a,SIZE5,P2S2a,SIZE3,ValBuff)||Clip2(P2S5a,SIZE5,P2S1a,SIZE2,ValBuff)||Clip2(P2S5a,SIZE5,P2S3a,SIZE3,ValBuff)||Clip2(P2S5a,SIZE5,P2S4a,SIZE4,ValBuff))
        {
        cout<<"Invalid Selection - Ships Cannot Overlap"<<endl;
        cout<<"Overlapping Ship Coordinates"<<endl;
        cout<<ValBuff<<endl;
        cout<<"Please Re-Initialize Ship"<<endl;
        cout<<"Use one Capital Letter from A-I followed by one Number 1-9"<<endl;
        ValBuff="0";
        }
    }   while (Clip2(P2S5a,SIZE5,P2S2a,SIZE3,ValBuff)||Clip2(P2S5a,SIZE5,P2S1a,SIZE2,ValBuff)||Clip2(P2S5a,SIZE5,P2S3a,SIZE3,ValBuff)||Clip2(P2S5a,SIZE5,P2S4a,SIZE4,ValBuff));
    cout<<endl;
    cout<<"Your Ship's Coordinates Are:"<<endl;
    ICoord(P2S5a,SIZE5);
    UpdSBrd(P2S5a,SIZE5,Brd2S,SIZE9,BrdMst);
    //End Player 2 Setup
    DisBrd(Brd2S,SIZE9); 
    }//End AI Bypass for Player 2 Setup,
    
    //Begin AI Player Setup
    else //Player 2 name = AI
    {
        while 
           (Clip2(P2S5a,SIZE5,P2S2a,SIZE3,ValBuff)||Clip2(P2S5a,SIZE5,P2S1a,SIZE2,ValBuff)||Clip2(P2S5a,SIZE5,P2S3a,SIZE3,ValBuff)||Clip2(P2S5a,SIZE5,P2S4a,SIZE4,ValBuff)||
            Clip2(P2S4a,SIZE4,P2S2a,SIZE3,ValBuff)||Clip2(P2S4a,SIZE4,P2S1a,SIZE2,ValBuff)||Clip2(P2S4a,SIZE4,P2S3a,SIZE3,ValBuff)||    
            Clip2(P2S3a,SIZE3,P2S2a,SIZE3,ValBuff)||Clip2(P2S3a,SIZE3,P2S1a,SIZE2,ValBuff)||
            Clip2(P2S1a,SIZE2,P2S2a,SIZE3,ValBuff)) //forces assignment to repeat until all values are not player values
        {
        BBdFill(Brd2S,SIZE9);    
        //Start AI While Loop
        //AI Ship Setup
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9    
        P2S1a[0]=(Cnvt(AIL))+to_string(AIN); //combine Column/Row for input
        if(AIN<2 || AIN>8)//Criteria for Selecting Ship Orientation
        {
            Cnvt(AIL)<"B"?ValBuff="R":ValBuff="L";//Conditional Operator for Grading Purposes
            
        }
        else 
        {
            if (rand()%2<1) {ValBuff="U";} //Criteria for Selecting Ship Orientation
            else {ValBuff="D";}
        }
        FillShp(P2S1a,SIZE2,ValBuff);
        UpdSBrd(P2S1a,SIZE2,Brd2S,SIZE9,BrdMst);
        
        AIL=0; AIN=0; //Reset Buffers for next ship
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9    
        P2S2a[0]=(Cnvt(AIL))+to_string(AIN); //combine Column/Row for input
        if(AIN<3 || AIN>7)//Criteria for Selecting Ship Orientation
        {
            if(Cnvt(AIL)>"G"){ValBuff="L";}//Criteria for Selecting Ship Orientation
            else {ValBuff="R";}
        }
        else 
        {
            if (rand()%2<1) {ValBuff="D";} //Criteria for Selecting Ship Orientation
            else {ValBuff="U";}
        }
        FillShp(P2S2a,SIZE3,ValBuff);
        UpdSBrd(P2S2a,SIZE3,Brd2S,SIZE9,BrdMst);
        //cout<<P2S2<<endl;
        
        AIL=0; AIN=0; //Reset Buffers for next ship
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9    
        P2S3a[0]=(Cnvt(AIL))+to_string(AIN); //combine Column/Row for input
        if(AIN<3 || AIN>7) //Criteria for Selecting Ship Orientation
        {
            if(Cnvt(AIL)>"G"){ValBuff="L";}//Criteria for Selecting Ship Orientation
            else {ValBuff="R";}
        }
        else 
        {
            if (rand()%2<1) {ValBuff="D";} //Criteria for Selecting Ship Orientation
            else {ValBuff="U";}
        }
        FillShp(P2S3a,SIZE3,ValBuff);
        UpdSBrd(P2S3a,SIZE3,Brd2S,SIZE9,BrdMst);
        //cout<<P2S3<<endl;
        
        AIL=0; AIN=0; //Reset Buffers for next ship
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9    
        P2S4a[0]=(Cnvt(AIL))+to_string(AIN); //combine Column/Row for input
        if(AIN<4 || AIN>6)//Criteria for Selecting Ship Orientation
        {
            if(Cnvt(AIL)>"F"){ValBuff="L";}//Criteria for Selecting Ship Orientation
            else {ValBuff="R";}
        }
        else 
        {
            if (rand()%2<1) {ValBuff="D";} //Criteria for Selecting Ship Orientation
            else {ValBuff="U";}
        }
        FillShp(P2S4a,SIZE4,ValBuff);
        UpdSBrd(P2S4a,SIZE4,Brd2S,SIZE9,BrdMst);
        //cout<<P2S4<<endl;
        
        AIL=0; AIN=0; //Reset Buffers for next ship
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9    
        P2S5a[0]=(Cnvt(AIL))+to_string(AIN); //combine Column/Row for input
        if(AIN!=5)//Criteria for Selecting Ship Orientation
        {
            if(Cnvt(AIL)>"E"){ValBuff="L";}//Criteria for Selecting Ship Orientation
            else {ValBuff="R";}
        }
        else 
        {
            if (rand()%2<1) {ValBuff="U";} //Criteria for Selecting Ship Orientation
            else {ValBuff="D";}
        }
        FillShp(P2S5a,SIZE5,ValBuff);
        UpdSBrd(P2S5a,SIZE5,Brd2S,SIZE9,BrdMst);
        //cout<<P2S5<<endl;
        cout<<"AI Ship Setup Has Run"<<endl;
        }//End AI While Loop
        if(P1Name=="Skip")
        {
        DisBrd(Brd2S,SIZE9);
        ICoord(P2S1a,SIZE2);
        ICoord(P2S2a,SIZE3);
        ICoord(P2S3a,SIZE3);
        ICoord(P2S4a,SIZE4);
        ICoord(P2S5a,SIZE5);
        }
    }
    //End AI Player Setup
    //---------------------------------------------------------------------
    //Transition to Gameplay
    cout<<"- - - - - - - - - - - - - - - - - - - - - - - -"<<endl;
    cout<<"- All ships were set up correctly.  Commence! -"<<endl;
    cout<<"- - - - - - - - - - - - - - - - - - - - - - - -"<<endl;
    cout<<endl;
    cout<<"Ready, Steady, Go!"<<endl;
    //End Transition to Gameplay
  
    Len=0; //Ensure length starts at 0
    cout<<"Input number of Turns to play"<<endl;
    cout<<"Game will End after final turn or when all Ships are Destroyed!"<<endl;
    cin>>Len; //player inputs turns for game
    IPVal(Len); //Overloaded Function Example - validates less guesses than board size
    cin.ignore();
    //Begin Gameplay While Loop
    Win="null"; //Force loop to run
    P1Pts=0;
    P2Pts=0;
    while (Win=="null") //Run forced while loop until winner is declared
    {    
    //Begin Turn Loop, Adjust turns below this line   
    for (int Turn=1; Turn<=Len; Turn++)
    {
        
    //Begin New Turn Transition Text
    cout<<"_______________________________________________"<<endl;
    cout<<"Turn #"<<Turn<<endl;
    cout<<"_______________________________________________"<<endl;
    cout<<P1Name<<"'s turn!"<<endl;
    //End New Turn Transition Text
    
    //Begin Player 1 Turn
    guess="0"; //Reset guess value
    cout<<endl;
    cout<<"Here is your Guess Board, "<<P1Name<<"!"<<endl;
    cout<<endl;
    cout<<endl;
    DisBrd(Brd1G,SIZE9);
    cout<<"Player 1 Points: "<<P1Pts<<endl;
    cout<<"Player 2 Points: "<<P2Pts<<endl;
    cout<<endl;
    cout<<endl;
    cout<<P1Name<<", Choose a Grid Square!"<<endl;
    cin>>ValBuff; //Receive player input into Buffer, do not declare guess until validated
    
    //Begin Player 1 Input Validation Function
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    guess=ValBuff; //Release Validation buffer to guess 
    ValBuff="0";
    //End Player 1 Input Validation Function
    
    //Player 1 now has a valid guess
    Shoot(guess,Brd2S,SIZE9,BrdMst,Brd1G,P1Pts);
 
    //Begin Endgame Check 
    if(P1Pts>=17) //Are all Player 2 Ships off the board?
    {Win=P1Name; Turn=Len;} //Set turns to max here to ensure game ends correctly, Declare Winner
    //End Endgame Check
    
    //End Player 1 Turn
    
    else //Endgame Check Fails, Run Player 2 Turn
    {
    
    if (P2Name!="AI")    
    { //Begin Bypass Player 2 input by AI   
    cout<<"________________"<<endl;    
    cout<<P2Name<<"'s turn!"<<endl;
    
    //Begin Player 2 Turn
    guess="0";       
    cout<<endl;
    cout<<"Here is your Guess Board, "<<P2Name<<"!"<<endl;
    cout<<endl;
    cout<<endl;
    DisBrd(Brd2G,SIZE9);
    cout<<"Player 1 Points: "<<P1Pts<<endl;
    cout<<"Player 2 Points: "<<P2Pts<<endl;
    cout<<endl;
    cout<<endl;
    cout<<P2Name<<", Choose a Grid Square!"<<endl;
    cin>>ValBuff; //Receive player input into Buffer, do not declare guess until validated
    
    //Begin Player 2 Input Validation Function
    
    IPVal (ValBuff); //Validation Function to Loop Player Input until within [A1,I9]
    } //End Bypass Player 2 Input by AI
    else
    { //Begin AI Turn
        AIL=0;AIN=0; //Reset Buffers for next ship
        AIL=(rand()%9+1+64); //set random Char for column guess A-I A=65?
        AIN=(rand()%9+1);   //set random Number for Row guess 1-9
        ValBuff=(Cnvt(AIL))+to_string(AIN); //concatenate string for guess
        cout<<"The computer has guessed "<<ValBuff<<endl;
        cout<<endl;
    } //End AI Turn
    guess=ValBuff; //Transfer buffer to actual guess
    ValBuff="0"; //Clear buffer
    //End Player 2 Input Validation Function
    Shoot(guess,Brd1S,SIZE9,BrdMst,Brd2G,P2Pts);
    //Player 2 now has a valid guess
    
    //Begin Endgame Check 
    if(P2Pts>=17) //Are all Player 2 Ships off the board?
    {Win=P2Name; Turn=Len;} //Set turns to max here to ensure game ends correctly, Declare Winner
    //End Endgame Check
    }
    cout<<"---==Turn End==---"<<endl;
    cout<<"Player 1 Points: "<<P1Pts<<endl;
    cout<<"Player 2 Points: "<<P2Pts<<endl;
    cout<<"------------------"<<endl;
    }//End Turn Loop

    //Declare Winner by Turns
    if (P1Pts<P2Pts) //Check player points
    {Win=P2Name;}
    else if (P1Pts==P2Pts) //Check if tie
    {Win="Nobody";}
    else {Win=P1Name;} //Only other possible outcome

    }//End Gameplay While Loop, put wrap up and score calculation below here
    cout<<"x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x"<<endl;
    cout<<endl;
    cout<<endl;
    cout<<endl;
    cout<<"GAME OVER"<<endl;
    cout<<P1Name<<" has "<<P1Pts<<" Points"<<endl;
    cout<<P2Name<<" has "<<P2Pts<<" Points"<<endl;
    cout<<Win<<" wins!"<<endl;
    
    //End Gameplay Display Text
    
    if(P1Name==Win) //Set Winner/Loser points
    {WinPts=P1Pts; LosePts=P2Pts;}
    else{WinPts=P2Pts;LosePts=P1Pts;}
    Scrs={}; //Default Scores Vector
    inFile.open("Test1.txt", ios::in);  //reads text to Vector
            
                while(!inFile.eof()) //while data exists in file
                {           

                    record Plyr; //create buffer structure
                    if(inFile >> Plyr.Name >> Plyr.Vs >> Plyr.Ps >> Plyr.Ts) //if all buffer slots are full
                    {Scrs.push_back(Plyr);} //make room for a new record
                    else
                    {//reset noise           
                        inFile.clear();
                        inFile.ignore(100,'\n');
                    }
                    
                }
            inFile.close();
    //Vector now loaded with text file data
             
    record Vctr;  //create winner record
        Vctr.Name=Win;
        Vctr.Vs='W';
        Vctr.Ps=WinPts;
        Vctr.Ts=Len;
        Scrs.push_back(Vctr);
    record Lsr;  //create loser record
        if(Win==P1Name){Lsr.Name=P2Name;}
        else {Lsr.Name=P1Name;}
        Lsr.Vs='L';
        Lsr.Ps=LosePts;
        Lsr.Ts=Len;
        Scrs.push_back(Lsr);
        
    outFile.open("Test1.txt",ios::out);  //Put Vector back into File
           for(int k=0;k<Scrs.size();k++)
           {
               outFile << Scrs[k].Name<<"\t"<<Scrs[k].Vs<<"\t"<<Scrs[k].Ps<<"\t"<<Scrs[k].Ts<<"\n"; //tab-delineated so it can be dropped in excel
            }
        outFile.close();
        Scrs={}; //Reset Vector       
            
    inFile.open("Test1.txt", ios::in);  //Re-Read Text File to Vector
                while(!inFile.eof())
                {
                    record Plyr;
                    if(inFile >> Plyr.Name >> Plyr.Vs >> Plyr.Ps >> Plyr.Ts)
                    {Scrs.push_back(Plyr);}
                    else{
                        inFile.clear();
                        inFile.ignore(100,'\n');
                    }
                }
            inFile.close();
        DisScre(Scrs); //display high scores after game
return 0;
}
void IPVal (string &ValBuff)
{//Start Input Validation check function
    string ColChk; //Buffer to check column letter
    int RowChk; //Buffer to check row number
    
    do
    {//Begin do-while loop for human input - does not allow invalid inputs
    ColChk=ValBuff.substr(0,1); //Set Column Buffer to letter input
    stringstream Row(ValBuff.substr(1,1)); //Convert number in string to a (lovely) integer
    Row>>RowChk; //Send Row string to RowChk integer
    if (ValBuff.length()!=2 || ColChk>"I" || ColChk<"A" || RowChk>9 || RowChk<1) //Determines if within appropriate bounds
    {cout<<"Input Invalid, please use one Capital Letter followed by one Number!"<<endl;cin>>ValBuff;}
    }while (ValBuff.length()!=2 || ColChk>"I" || ColChk<"A" || RowChk>9 || RowChk<1); //Loops if not within appropriate bounds
    
}
void IPVal (short &Len) //Just for the Overloading example, checks size of turns for board
{
    while(Len>(9*9)) //board is 9x9
    {
        cout<<"You will run out of guesses before then!"<<endl;
        cout<<"Input Less Turns!"<<endl;
        cin>>Len;
    }
}
void FillShp (string a[],int SIZE, string user)
{
    string Letter;      //String Buffer
    char* Buff, act;    //String to Char conversion assistants
    int Num;    //Number Buffer
    bool Flip;  //Gate for input validation
    Flip=true;
    Letter=a[0].substr(0,1);                //extract letter from guess
    stringstream NumBuff(a[0].substr(1,1)); //extract number from guess
    NumBuff>>Num;                           //fill Number buffer
    
    while (Flip)
    {
    if (user.compare("R")==0 || user.compare("r")==0 ||user.compare("L")==0 ||user.compare("l")==0 ||user.compare("U")==0 ||user.compare("u")==0 ||user.compare("D")==0 ||user.compare("d")==0 )
    {Flip=false;    } //Ensures data is a valid selection
    else {cout<<"Invalid Input Please use |L|  |R|  |U|  |D|"<<endl;cin>>user;}
        //Ship Orientation Specifics
    if(user=="R" || user=="r") 
    {
            if(Letter=="I"){cout<<"Your Selection goes Off the Board!  Please Use |L|, |U|, or |D|"<<endl;Flip=true; cin>>user; }
            else if(Letter=="H"&&SIZE>2){cout<<"Your Selection goes Off the Board!  Please Use |L|, |U|, or |D|"<<endl;Flip=true; cin>>user; }
            else if(Letter=="G"&&SIZE>3){cout<<"Your Selection goes Off the Board!  Please Use |L|, |U|, or |D|"<<endl;Flip=true; cin>>user; }
            else if(Letter=="F"&&SIZE>4){cout<<"Your Selection goes Off the Board!  Please Use |L|, |U|, or |D|"<<endl;Flip=true; cin>>user; }
        else
        {
        for (int i=1 ; i<SIZE ; i++)
            {
           Buff=const_cast<char*>(Letter.c_str()); //Allows Buff to embody pointer to Letter String
           act=*Buff; //Converts the Char* pointer to an actual variable 
           act++;
          Letter=act;
          a[i]=(Letter+to_string(Num));
            }
        }
    }//End Right
    else if (user=="U" || user=="u")
    {
            if(Num==1){cout<<"Your Selection goes Off the Board!  Please Use |R|, |L|, or |D|"<<endl;Flip=true; cin>>user; }
            else if(Num==2&&SIZE>2){cout<<"Your Selection goes Off the Board!  Please Use |R|, |L|, or |D|"<<endl;Flip=true; cin>>user; }
            else if(Num==3&&SIZE>3){cout<<"Your Selection goes Off the Board!  Please Use |R|, |L|, or |D|"<<endl;Flip=true; cin>>user; }
            else if(Num==4&&SIZE>4){cout<<"Your Selection goes Off the Board!  Please Use |R|, |L|, or |D|"<<endl;Flip=true; cin>>user; }
      else
      {  
        for (int i=1 ; i<SIZE ; i++)
        {
        Num--;
        a[i]=(Letter+to_string(Num));
        }
      }
    }//End Up
    else if (user=="L" || user=="l")
    {
            if(Letter=="A"){cout<<"Your Selection goes Off the Board!  Please Use |R|, |U|, or |D|"<<endl;Flip=true; cin>>user; }
            else if(Letter=="B"&&SIZE>2){cout<<"Your Selection goes Off the Board!  Please Use |R|, |U|, or |D|"<<endl;Flip=true; cin>>user; }
            else if(Letter=="C"&&SIZE>3){cout<<"Your Selection goes Off the Board!  Please Use |R|, |U|, or |D|"<<endl;Flip=true; cin>>user; }
            else if(Letter=="D"&&SIZE>4){cout<<"Your Selection goes Off the Board!  Please Use |R|, |U|, or |D|"<<endl;Flip=true; cin>>user; }
      else
      {
        for (int i=1 ; i<SIZE ; i++)
        {
        Buff=const_cast<char*>(Letter.c_str());
        act=*Buff;
        act--;
        Letter=act;
        a[i]=(Letter+to_string(Num));
        }
      }
    }//End Left
    else if (user=="D" || user=="d")
    {
        if(Num==10){cout<<"Your Selection goes Off the Board!  Please Use |R|, |L|, or |U|"<<endl;Flip=true; cin>>user; }
            else if(Num==9&&SIZE>2){cout<<"Your Selection goes Off the Board!  Please Use |R|, |L|, or |U|"<<endl;Flip=true; cin>>user; }
            else if(Num==8&&SIZE>3){cout<<"Your Selection goes Off the Board!  Please Use |R|, |L|, or |U|"<<endl;Flip=true; cin>>user; }
            else if(Num==7&&SIZE>4){cout<<"Your Selection goes Off the Board!  Please Use |R|, |L|, or |U|"<<endl;Flip=true; cin>>user; }
      else
      {
        for (int i=1 ; i<SIZE ; i++)
        {
        Num++;
        a[i]=(Letter+to_string(Num));
        }  
      }
    }//end Down
    else {cout<<"You are trying to enter a Grid Square instead of a Direction"<<endl;
    cout<<"Use |L|  |R|  |U|  |D|"<<endl;}
    }//end While Loop
}
bool Clip2 (string a[],int SIZEA,string b[],int SIZEB,string &ValBuff)
{//Compares two arrays for any overlap
    for (int i=0 ; i<SIZEA ; i++)
    {
        for(int j=0 ; j<SIZEB ; j++)
        {
            if(a[i]==b[j])
            {ValBuff=a[i];return(true);}
        }
    }
    return(false);
}
void ICoord (string a[],int SIZE)
{//outputs individual ship coordinates
    cout<<"| ";
    for (int i=0 ; i<SIZE ; i++)
    {
        cout<<a[i]<<" | ";
    }
    cout<<endl;
}
void UpdSBrd (string a[],int aSIZE,string b[][9],int bSIZE,string m[][9]) //updates ship boards
{
    for(int i=0 ; i<aSIZE ; i++)
    {
    for(int q=0 ; q<bSIZE; q++)
    {
        for(int w=0 ; w<bSIZE; w++)
        {
            if(a[i]==m[w][q])
            {
                b[w][q]="||";
            }
        }
    }
    }
}
void UpdGBrd (string user,string b[][9],int bSIZE,string m[][9],bool hit) //updates guess boards
{
    for(int i=0 ; i<bSIZE ; i++)
    {
        for(int q=0 ; q<bSIZE; q++)
        {
            if(m[i][q]==user)
            {
                if(hit==true)
                {b[i][q]="XX";}
                else
                { b[i][q]="OO";}
            }
        }
    }
}
void MBdFill (string b[][9],int SIZE)
{//Fills Master Board with Grid Locations
    string Letter;
    char* Buff, act;
    int Num;
    Num=1;
    Letter="A"; //grid starts with this letter
    for(int q=0 ; q<SIZE; q++)
    {
        for(int w=0 ; w<SIZE; w++)
        {
            b[w][q]=(Letter+to_string(Num));
            Buff=const_cast<char*>(Letter.c_str()); //Allows Buff to embody pointer to Letter String
            act=*Buff; //Converts the Char* pointer to an actual variable 
            act++; //Adds one to Char, sending it down alphabetically
            Letter=act;
        }
        Num++;      //next row numbers
        Letter="A"; //reset columns for next row
    }
}
void DisBrd (string b[][9],int SIZE)
{//Displays any board with nice formatting
    cout<<"    A  B  C  D  E  F  G  H  I"<<endl;
    cout<<"    -------------------------"<<endl;
    for(int q=0 ; q<SIZE; q++)
    {
        cout<<q+1<<" | ";
        for(int w=0 ; w<SIZE; w++)
        {cout<<b[w][q]<<" ";}
        cout<<endl;
    }
    cout<<"    -------------------------"<<endl;
}
void BBdFill (string b[][9],int bSIZE)
{//Fills a player board with waves - it's the ocean!
    for(int q=0 ; q<bSIZE; q++)
    {
        for(int w=0 ; w<bSIZE; w++)
        {
          b[w][q]="~~"; //Ride on those waves!
        }
        
    }
}
void Shoot (string user,string b[][9],int bSIZE,string m[][9],string g[][9],short &pts)
{
    bool hit; //input for updating guess boards with X's or O's
    for(int i=0 ; i<bSIZE ; i++)
    {
    for(int q=0 ; q<bSIZE; q++)
    {
        if(m[i][q]==user)
        {
            if(b[i][q]=="||")
            {
                b[i][q]="XX";
                pts++;
                hit=true;
            }
            else
            {
                cout<<"You Missed!"<<endl;
                hit=false;
            }
        }
    }
    }
    UpdGBrd (user,g,bSIZE,m,hit); //update guess board for player
}
void DisScre(vector<record> &Scrs)
{//Displays Vector contents
    record disp;
    cout<<"Name"<<"\t"<<"W/L"<<"\t"<<"Pts"<<"\t"<<"Turns"<<endl;
            for(int h=0;h<(Scrs.size());h++)
            {
                cout<<Scrs[h].Name<<"\t"<<Scrs[h].Vs<<"\t"<<Scrs[h].Ps<<"\t"<<Scrs[h].Ts<<endl;
            }
}
string Cnvt (char rec)
{//Converts char to string - for grading purposes only ("return" a variable)
    string Buff;
    Buff=rec;
    return Buff;
}
